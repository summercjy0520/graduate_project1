/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package ics.whu.edu.cn.madrix.ts.translate.test;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import ics.whu.edu.cn.madrix.basis.MadrixUtils;
import ics.whu.edu.cn.madrix.common.exceptions.MadrixException;
import ics.whu.edu.cn.madrix.ts.translate.train.Normalization;

/**
 * @author summer
 *
 */
public class KnnDistanceTest0917 {

//	private static final int DEFAULT_TS_LENGTH = 1024;
	private static int p=16; //time delay
	private static int s=100; //the length of prediction
	
	/**
	 * @param args
	 * @throws MadrixException 
	 */
	public static void main(String[] args) throws MadrixException {
		File f = new File("/home/summer/桌面/2016/9/600036.txt");
        BufferedReader reader = null;

        try {
            reader = new BufferedReader(new FileReader(f));
            String str = null;
            try {
                List<String> dataset = new ArrayList<String>();

                while ((str = reader.readLine()) != null) {
                    dataset.add(str);
                }
                reader.close();
           
		double[] input = MadrixUtils.genVector(dataset.size()-1);
		for (int i = 1; i < dataset.size(); i++) {
			String temp=dataset.get(i);
			String[]tempt=temp.split("\t");
			input[i-1] =Double.valueOf(tempt[4]);
		}
		Normalization normalizate= new Normalization();
		input=normalizate.Normalizate(input);
		double[] firstOrder = 	MadrixUtils.dupVector(input, 1, dataset.size() - 2);
		for (int i =0; i < firstOrder.length; i++) {
		firstOrder[i] -= input[i];
//		firstOrder[i] = firstOrder[i]/input[i];
		}
		int zis=1;
		double[] DTWdistance=new double[s];
		while(zis<s){
		int z=firstOrder.length-s-p+zis-1;
		double[][] Xmatrix=new double[z][p];
		int h=0;
		for(int i=0;i<z;i++){
			for(int j=0;j<p;j++){
				if(h+j<=firstOrder.length-s+zis)
				Xmatrix[i][j]=firstOrder[h+j];
			}
			h=h+1;
		}
		double[][] Xpredicton=new double[1][p];
		for(int i=0;i<p;i++){
			Xpredicton[0][i]=firstOrder[firstOrder.length-s-p+zis-1+i];
		}
		DTWdistance[zis-1]=MadrixUtils.matrixDTWPDistance(Xmatrix, Xpredicton, p);
		 System.out.print(DTWdistance[zis-1]+ "  " +firstOrder[firstOrder.length-s+zis-1]);
		 System.out.println();
		 zis=zis+1;
		}
            }catch (IOException e) {
                e.printStackTrace();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
	}
            
}
